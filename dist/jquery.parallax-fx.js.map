{"version":3,"sources":["jquery.parallax-fx.js"],"names":["$","Util","clamp","value","min","max","Math","ParallaxFx","$element","options","_getMergedOptions","offset","_init","css","duration","newOffset","offsetScale","_resetTimer","timer","setTimeout","delay","clearTimeout","extend","defaults","DATA_KEY","fn","parallaxFx","each","index","element","instance","data","incOffset","execute"],"mappings":"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","file":"jquery.parallax-fx.js","sourcesContent":["(function ($) {\n  'use strict';\n\n  const Util = {\r\n    clamp(value, min, max) {\r\n      return Math.min(Math.max(value, min), max);\r\n    },\r\n  };\n\n  class ParallaxFx {\r\n    constructor($element, options) {\r\n      this.$element = $element;\r\n      this.options = ParallaxFx._getMergedOptions(options);\r\n      this.offset = 0;\r\n      this._init();\r\n    }\r\n\r\n    static _getMergedOptions(options) {\r\n      return $.extend({}, ParallaxFx.defaults, options);\r\n    }\r\n\r\n    _init() {\r\n      this.$element.css(\r\n        'transition',\r\n        `transform ${this.options.duration} ease-out`\r\n      );\r\n    }\r\n\r\n    incOffset(value) {\r\n      let newOffset = value * this.options.offsetScale;\r\n      newOffset = Util.clamp(newOffset, -100, 100);\r\n      this.offset -= newOffset;\r\n    }\r\n\r\n    execute() {\r\n      this._resetTimer();\r\n      this.timer = setTimeout(() => {\r\n        this.$element.css(\r\n          'transform',\r\n          `translate3d(0, ${this.offset}px, 0)`\r\n        );\r\n      }, this.options.delay);\r\n    }\r\n\r\n    _resetTimer() {\r\n      this.timer && clearTimeout(this.timer);\r\n    }\r\n\r\n    reset() {\r\n      this._resetTimer();\r\n      this.$element.css('transform', 'translate3d(0, 0, 0)');\r\n      this.offset = 0;\r\n    }\r\n  }\r\n\r\n  ParallaxFx.defaults = {\r\n    offsetScale: 0.06,\r\n    duration: '0.5s',\r\n    delay: 100,\r\n  };\r\n\r\n  // class ParallaxFx {\r\n  //   constructor($element, options) {\r\n  //     this.$element = $element;\r\n  //     this.options = $.extend({}, ParallaxFx.defaults, options);\r\n  //     this.offset = 0;\r\n  //   }\r\n\r\n  //   init() {\r\n  //     this.$element.css(\r\n  //       'transition',\r\n  //       `transform ${this.options.duration} ease-out`\r\n  //     );\r\n  //   }\r\n\r\n  //   incOffset(value) {\r\n  //     let newOffset = value * this.options.scale;\r\n  //     newOffset = Util.clamp(newOffset, -100, 100);\r\n  //     this.offset -= newOffset;\r\n  //   }\r\n\r\n  //   execute() {\r\n  //     this._resetTimer();\r\n  //     this.timer = setTimeout(() => {\r\n  //       this.$element.css(\r\n  //         'transform',\r\n  //         `translate3d(0, ${this.offset}px, 0)`\r\n  //       );\r\n  //     }, this.options.delay);\r\n  //   }\r\n\r\n  //   _resetTimer() {\r\n  //     this.timer && clearTimeout(this.timer);\r\n  //   }\r\n\r\n  //   reset() {\r\n  //     this._resetTimer();\r\n  //     this.$element.css('transform', 'translate3d(0, 0, 0)');\r\n  //   }\r\n  // }\r\n\r\n  // ParallaxFx.defaults = {\r\n  //   scale: 0.06,\r\n  //   duration: '0.5s',\r\n  //   delay: 100,\r\n  // };\r\n\r\n  // export default ParallaxFx;\n\n  const DATA_KEY = 'rsh.parallax-fx';\r\n\r\n  $.fn.parallaxFx = function (options) {\r\n    return this.each((index, element) => {\r\n      const $element = $(element);\r\n      let instance = $element.data(DATA_KEY);\r\n\r\n      if (!instance) {\r\n        $element.data(\r\n          DATA_KEY, \r\n          instance = new ParallaxFx($element, options)\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (typeof options == 'number') {\r\n        instance.incOffset(options);\r\n        instance.execute();\r\n      } else if (typeof options == 'string') {\r\n        instance[options]();\r\n      }\r\n    });\r\n  };\r\n\r\n  // $.fn.parallaxFx = function (option) {\r\n  //   return this.each((index, element) => {\r\n  //     const $element = $(element);\r\n  //     let instance = $element.data(DATA_KEY);\r\n\r\n  //     if (!instance) {\r\n  //       $element.data(\r\n  //         DATA_KEY,\r\n  //         instance = new ParallaxFx($element)\r\n  //       );\r\n  //     }\r\n\r\n  //     if (typeof option == 'number') {\r\n  //       instance.incOffset(option);\r\n  //       instance.execute();\r\n  //     } else if (typeof option == 'string') {\r\n  //       instance[option]();\r\n  //     }\r\n  //   });\r\n  // };\n\n}($));\n"]}